## 前置知识：前缀和

对于数组 $\textit{nums}$，定义前缀和 $\textit{s}[0]=0$，$\textit{s}[i+1] = \sum\limits_{j=0}^{i}\textit{nums}[j]$。

根据这个定义，有 $s[i+1]=s[i]+\textit{nums}[i]$。

例如 $\textit{nums}=[1,2,1,2]$，对应的前缀和数组为 $s=[0,1,3,4,6]$。

通过前缀和，我们可以把**子数组的元素和转换成两个前缀和的差**，即

$$
\sum_{j=\textit{left}}^{\textit{right}}\textit{nums}[j] = \sum\limits_{j=0}^{\textit{right}}\textit{nums}[j] - \sum\limits_{j=0}^{\textit{left}-1}\textit{nums}[j] = \textit{s}[\textit{right}+1] - \textit{s}[\textit{left}]
$$

例如 $\textit{nums}$ 的子数组 $[2,1,2]$ 的和就可以用 $s[4]-s[1]=6-1=5$ 算出来。

> 注：为方便计算，常用左闭右开区间 $[\textit{left},\textit{right})$ 来表示从 $\textit{nums}[\textit{left}]$ 到 $\textit{nums}[\textit{right}-1]$ 的子数组，此时子数组的和为 $\textit{s}[\textit{right}] - \textit{s}[\textit{left}]$，子数组的长度为 $\textit{right}-\textit{left}$。
>
> 注 2：$s[0]=0$ 表示一个空数组的元素和。为什么要额外定义它？想一想，如果要计算的子数组恰好是一个前缀（从 $\textit{nums}[0]$ 开始），你要用 $s[\textit{right}]$ 减去谁呢？通过定义 $s[0]=0$，任意子数组（包括前缀）都可以表示为两个前缀和的差。

## 思路

![1031-c.png](https://pic.leetcode.cn/1682327896-NuZacZ-1031-c.png)

## 实现细节

设 $b$ 的下标范围为左闭右开区间 $[i-\textit{secondLen},i)$，其元素和为 $s[i] - s[i-\textit{secondLen}]$。

由于左边要留空间给 $a$，所以 $i$ 要从 $\textit{firstLen}+\textit{secondLen}$ 开始枚举（结合上图理解）。

由于每次枚举一个新的 $i$，都会在 $b$ 的左边产生一个新的子数组 $[i-\textit{secondLen}-\textit{firstLen},i-\textit{secondLen})$，所以用它的元素和 $s[i-\textit{secondLen}] - s[i-\textit{secondLen}-\textit{firstLen}]$ 去更新 $\textit{maxSumA}$。

把这个算法封装成一个函数 $f(\textit{firstLen},\textit{secondLen})$，表示左 $a$ 右 $b$ 的计算。那么 $f(\textit{secondLen},\textit{firstLen})$ 就是左 $b$ 右 $a$ 的计算了。

* [sol1-Python3]

```py
class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        s = list(accumulate(nums, initial=0))  # nums 的前缀和
        ans = 0
        def f(firstLen: int, secondLen: int) -> None:
            nonlocal ans
            maxSumA = 0
            for i in range(firstLen + secondLen, len(s)):
                maxSumA = max(maxSumA, s[i - secondLen] - s[i - secondLen - firstLen])
                ans = max(ans, maxSumA + s[i] - s[i - secondLen])
        f(firstLen, secondLen)  # 左 a 右 b
        f(secondLen, firstLen)  # 左 b 右 a
        return ans
```

* [sol1-Java]

```java
class Solution {
    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        int n = nums.length;
        int[] s = new int[n + 1];
        for (int i = 0; i < n; i++)
            s[i + 1] = s[i] + nums[i]; // 计算 nums 的前缀和
        return Math.max(f(s, firstLen, secondLen), f(s, secondLen, firstLen));
    }

    private int f(int[] s, int firstLen, int secondLen) {
        int maxSumA = 0, res = 0;
        for (int i = firstLen + secondLen; i < s.length; ++i) {
            maxSumA = Math.max(maxSumA, s[i - secondLen] - s[i - secondLen - firstLen]);
            res = Math.max(res, maxSumA + s[i] - s[i - secondLen]);
        }
        return res;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int maxSumTwoNoOverlap(vector<int> &nums, int firstLen, int secondLen) {
        int ans = 0, n = nums.size(), s[n + 1];
        s[0] = 0;
        partial_sum(nums.begin(), nums.end(), s + 1); // 计算 nums 的前缀和
        auto f = [&](int firstLen, int secondLen) {
            int maxSumA = 0;
            for (int i = firstLen + secondLen; i <= n; ++i) {
                maxSumA = max(maxSumA, s[i - secondLen] - s[i - secondLen - firstLen]);
                ans = max(ans, maxSumA + s[i] - s[i - secondLen]);
            }
        };
        f(firstLen, secondLen); // 左 a 右 b
        f(secondLen, firstLen); // 左 b 右 a
        return ans;
    }
};
```

* [sol1-Go]

```go
func maxSumTwoNoOverlap(nums []int, firstLen, secondLen int) (ans int) {
    n := len(nums)
    s := make([]int, n+1)
    for i, x := range nums {
        s[i+1] = s[i] + x // 计算 nums 的前缀和
    }
    f := func(firstLen, secondLen int) {
        maxSumA := 0
        for i := firstLen + secondLen; i <= n; i++ {
            maxSumA = max(maxSumA, s[i-secondLen]-s[i-secondLen-firstLen])
            ans = max(ans, maxSumA+s[i]-s[i-secondLen])
        }
    }
    f(firstLen, secondLen) // 左 a 右 b
    f(secondLen, firstLen) // 左 b 右 a
    return
}

func max(a, b int) int { if b > a { return b }; return a }
```

## 简化代码

「左 $a$ 右 $b$」和「左 $b$ 右 $a$」可以合并到同一个循环中。

* [sol2-Python3]

```py
class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        s = list(accumulate(nums, initial=0))  # nums 的前缀和
        ans = maxSumA = maxSumB = 0
        for i in range(firstLen + secondLen, len(s)):
            maxSumA = max(maxSumA, s[i - secondLen] - s[i - firstLen - secondLen])
            maxSumB = max(maxSumB, s[i - firstLen] - s[i - firstLen - secondLen])
            ans = max(ans, maxSumA + s[i] - s[i - secondLen], maxSumB + s[i] - s[i - firstLen])
        return ans
```

* [sol2-Java]

```java
class Solution {
    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        int n = nums.length;
        int[] s = new int[n + 1];
        for (int i = 0; i < n; i++)
            s[i + 1] = s[i] + nums[i]; // 计算 nums 的前缀和
        int ans = 0, maxSumA = 0, maxSumB = 0;
        for (int i = firstLen + secondLen; i <= n; ++i) {
            maxSumA = Math.max(maxSumA, s[i - secondLen] - s[i - secondLen - firstLen]);
            maxSumB = Math.max(maxSumB, s[i - firstLen] - s[i - firstLen - secondLen]);
            ans = Math.max(ans, Math.max(maxSumA + s[i] - s[i - secondLen],  // 左 a 右 b
                                         maxSumB + s[i] - s[i - firstLen])); // 左 b 右 a
        }
        return ans;
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int maxSumTwoNoOverlap(vector<int> &nums, int firstLen, int secondLen) {
        int n = nums.size(), s[n + 1];
        s[0] = 0;
        partial_sum(nums.begin(), nums.end(), s + 1); // 计算 nums 的前缀和
        int ans = 0, maxSumA = 0, maxSumB = 0;
        for (int i = firstLen + secondLen; i <= n; ++i) {
            maxSumA = max(maxSumA, s[i - secondLen] - s[i - secondLen - firstLen]);
            maxSumB = max(maxSumB, s[i - firstLen] - s[i - firstLen - secondLen]);
            ans = max(ans, max(maxSumA + s[i] - s[i - secondLen],  // 左 a 右 b
                               maxSumB + s[i] - s[i - firstLen])); // 左 b 右 a
        }
        return ans;
    }
};
```

* [sol2-Go]

```go
func maxSumTwoNoOverlap(nums []int, firstLen, secondLen int) (ans int) {
    n := len(nums)
    s := make([]int, n+1)
    for i, x := range nums {
        s[i+1] = s[i] + x // 计算 nums 的前缀和
    }
    maxSumA, maxSumB := 0, 0
    for i := firstLen + secondLen; i <= n; i++ {
        maxSumA = max(maxSumA, s[i-secondLen]-s[i-secondLen-firstLen])
        maxSumB = max(maxSumB, s[i-firstLen]-s[i-firstLen-secondLen])
        ans = max(ans, max(maxSumA+s[i]-s[i-secondLen], // 左 a 右 b
                           maxSumB+s[i]-s[i-firstLen])) // 左 b 右 a
    }
    return
}

func max(a, b int) int { if b > a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

> 注：还可以用 $4$ 个滑动窗口来实现。（$\mathcal{O}(1)$ 额外空间，且不修改 $\textit{nums}$。）

## 总结

对于有两个变量的题目，通常可以枚举其中一个变量，把它视作常量，从而转化成只有一个变量的问题。

对于本题来说，就是枚举 $b$，把问题转化成计算 $a$ 的最大元素和。

其实这个技巧在 [1. 两数之和](https://leetcode.cn/problems/two-sum/) 中就体现了：枚举第二个数，去左边找第一个数。（用哈希表优化找第一个数的过程。）

## 相似题目

- [2555. 两个线段获得的最多奖品](https://leetcode.cn/problems/maximize-win-from-two-segments/)，[题解](https://leetcode.cn/problems/maximize-win-from-two-segments/solution/tong-xiang-shuang-zhi-zhen-ji-lu-di-yi-t-5hlh/)

[往期每日一题题解](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

---

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
